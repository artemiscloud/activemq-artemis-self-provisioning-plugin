import {
  Button,
  Card,
  CardBody,
  CardTitle,
  Form,
  FormFieldGroup,
  FormFieldGroupExpandable,
  FormFieldGroupHeader,
  FormGroup,
  Modal,
  ModalVariant,
  SimpleList,
  SimpleListGroup,
} from '@patternfly/react-core';
import { CSSProperties, FC, useContext, useState } from 'react';
import {
  ArtemisReducerOperations,
  BrokerCreationFormDispatch,
  BrokerCreationFormState,
  getAcceptorFromCertManagerResourceTemplate,
  getCertManagerResourceTemplateFromAcceptor,
} from '../brokers/utils';
import { useTranslation } from '../i18n';
import { Acceptor, ResourceTemplate } from '../utils';
import { SelectIssuerDrawer } from './cert-manager';
import { TrashIcon } from '@patternfly/react-icons';

type WithAcceptorProps = {
  acceptor?: Acceptor;
};

interface AddIssuerAnnotationModalProps extends WithAcceptorProps {
  isModalOpen: boolean;
  setIsModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
}

const AddAnnotationModal: FC<AddIssuerAnnotationModalProps> = ({
  isModalOpen,
  setIsModalOpen,
  acceptor: initialAcceptor,
}) => {
  const { t } = useTranslation();
  const handleModalToggle = () => {
    setIsModalOpen(!isModalOpen);
  };
  const dispatch = useContext(BrokerCreationFormDispatch);
  const [selectedIssuer, setSelectedIssuer] = useState<string>('');
  const [selectedAcceptor, setSelectedAcceptor] = useState<string>(
    initialAcceptor ? initialAcceptor.name : '',
  );
  const [prevInitialAcceptor, setPrevInitialAcceptor] =
    useState(initialAcceptor);
  if (prevInitialAcceptor !== initialAcceptor) {
    setSelectedAcceptor(initialAcceptor ? initialAcceptor.name : '');
    setPrevInitialAcceptor(initialAcceptor);
  }

  const createAnnotation = () => {
    if (selectedIssuer === '' || selectedAcceptor === '') {
      return;
    }
    dispatch({
      operation: ArtemisReducerOperations.activatePEMGenerationForAcceptor,
      payload: {
        acceptor: selectedAcceptor,
        issuer: selectedIssuer,
      },
    });
    setShowCertManagerForm(false);
    setSelectedIssuer('');
    handleModalToggle();
  };

  const { cr } = useContext(BrokerCreationFormState);
  const hasACertManagerAnnotation =
    getCertManagerResourceTemplateFromAcceptor(cr, initialAcceptor) !==
    undefined;
  const [showCertManagerForm, setShowCertManagerForm] = useState(false);
  return (
    <Modal
      variant={ModalVariant.medium}
      title={t('Add an annotation')}
      isOpen={isModalOpen}
      onClose={handleModalToggle}
      actions={[
        <Button
          key="confirm"
          variant="primary"
          onClick={createAnnotation}
          isDisabled={selectedIssuer === '' || selectedAcceptor === ''}
        >
          Confirm
        </Button>,
        <Button key="cancel" variant="link" onClick={handleModalToggle}>
          Cancel
        </Button>,
      ]}
    >
      <Form isWidthLimited>
        <FormFieldGroup
          header={
            <FormFieldGroupHeader
              titleText={{
                text: t('select_annotation'),
                id: 'nested-field-groupcard',
              }}
              titleDescription={t('select_annotation_help')}
            />
          }
        >
          <Card
            id="selectable-first-card"
            onClick={() => {
              if (hasACertManagerAnnotation) {
                return;
              }
              setShowCertManagerForm(!showCertManagerForm);
            }}
            isSelectableRaised
            isSelected={showCertManagerForm}
            hasSelectableInput
            isCompact
            style={{ 'max-width': '100%' } as CSSProperties}
            isDisabledRaised={hasACertManagerAnnotation}
          >
            <CardTitle>{t('Annotate_an_acceptor_with_an_issuer')}</CardTitle>
            <br />
            <CardBody>
              <SimpleListGroup title="Effects:">
                <SimpleList>
                  <li>
                    Makes the acceptor receive a generated ssl certificate at
                    runtime. The certificate is signed by the issuer and is
                    generated by cert-manager.
                  </li>
                  <li>
                    Creates an ingress to expose the acceptor using the same
                    certificate to secure the connection
                  </li>
                  <li>
                    Makes the issuer certificate available for download on the
                    broker details page (when the broker is running).
                  </li>
                </SimpleList>
              </SimpleListGroup>
            </CardBody>
          </Card>
        </FormFieldGroup>
        {showCertManagerForm && (
          <FormFieldGroup
            header={
              <FormFieldGroupHeader
                titleText={{
                  text: t('cert_manager_annotation'),
                  id: 'nested-field-certmanager',
                }}
              />
            }
          >
            <FormGroup
              label={t('select_issuer')}
              helperText={t('select_an_issuer_help')}
              isRequired
            >
              <SelectIssuerDrawer
                selectedIssuer={selectedIssuer}
                setSelectedIssuer={setSelectedIssuer}
                clearIssuer={() => setSelectedIssuer('')}
              />
            </FormGroup>
          </FormFieldGroup>
        )}
      </Form>
    </Modal>
  );
};

type ResourceTemplateProps = {
  resourceTemplate: ResourceTemplate;
};

const CertManagerAnnotation: FC<ResourceTemplateProps> = ({
  resourceTemplate,
}) => {
  const { cr } = useContext(BrokerCreationFormState);
  const { t } = useTranslation();
  const dispatch = useContext(BrokerCreationFormDispatch);
  const acceptor = getAcceptorFromCertManagerResourceTemplate(
    cr,
    resourceTemplate,
  );
  return (
    <FormFieldGroupExpandable
      isExpanded
      toggleAriaLabel="Details"
      header={
        <FormFieldGroupHeader
          titleText={{
            text: 'Cert-Manager Annotation',
            id: 'nested-field-cert-manager-annotation-id' + acceptor.name,
          }}
          titleDescription="Configuration of the cert-manager annotation"
          actions={
            <Button
              variant="plain"
              aria-label="Remove"
              onClick={() =>
                dispatch({
                  operation:
                    ArtemisReducerOperations.deletePEMGenerationForAcceptor,
                  payload: acceptor.name,
                })
              }
            >
              <TrashIcon />
            </Button>
          }
        />
      }
    >
      <FormGroup label={t('select_issuer')} isRequired>
        <SelectIssuerDrawer
          selectedIssuer={
            resourceTemplate.annotations['cert-manager.io/issuer']
          }
          setSelectedIssuer={(issuer: string) => {
            dispatch({
              operation: ArtemisReducerOperations.updateAnnotationIssuer,
              payload: {
                acceptorName: acceptor.name,
                newIssuer: issuer,
              },
            });
          }}
          clearIssuer={() => {
            dispatch({
              operation: ArtemisReducerOperations.updateAnnotationIssuer,
              payload: {
                acceptorName: acceptor.name,
                newIssuer: '',
              },
            });
          }}
        />
      </FormGroup>
    </FormFieldGroupExpandable>
  );
};

type NewAnnotationCardsProps = {
  acceptor: Acceptor;
};
/**
 * Displays a card per available annotation for the given acceptor;
 * If the annotation is already applied, the card gets disabled and is in the
 * "selected" mode.
 */
export const NewAnnotationButton: FC<NewAnnotationCardsProps> = ({
  acceptor,
}) => {
  const [showIssuerAnnotationModal, setShowIssuerAnnotationModal] =
    useState(false);
  return (
    <>
      <AddAnnotationModal
        isModalOpen={showIssuerAnnotationModal}
        setIsModalOpen={setShowIssuerAnnotationModal}
        acceptor={acceptor}
      />
      <Button onClick={() => setShowIssuerAnnotationModal(true)}>
        Add an annotation
      </Button>
    </>
  );
};

type ListAnnotationsProps = {
  acceptor: Acceptor;
};

export const ListAnnotations: FC<ListAnnotationsProps> = ({ acceptor }) => {
  const { cr } = useContext(BrokerCreationFormState);
  const certManagerRt = getCertManagerResourceTemplateFromAcceptor(
    cr,
    acceptor,
  );
  if (!certManagerRt) {
    return <></>;
  }
  return (
    <>
      {certManagerRt && (
        <CertManagerAnnotation resourceTemplate={certManagerRt} />
      )}
    </>
  );
};
